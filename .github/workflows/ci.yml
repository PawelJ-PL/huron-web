name: Continuous Integration

on:
  push:
    branches: ["**"]
    tags: ["v*"]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Node"
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"
      - name: "Install dependencies"
        run: "npm install"
      - name: "Run frontend tests"
        run: "npm run test"
      - name: "Linter"
        run: "npm run lint"
      - name: "Check formatting"
        run: "npm run formatter-check"

  build-frontend:
    runs-on: ubuntu-latest
    needs: ["test-frontend"]
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Node"
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"
      - name: "Install dependencies"
        run: "npm install"
      - name: "Build app"
        run: "npm run build"
      - name: "Upload frontend artifact"
        uses: actions/upload-artifact@v2
        with:
          name: "frontend-${{github.sha}}"
          path: "frontend/build/"
          retention-days: 1
          if-no-files-found: "error"

  snyk-monitor-frontend:
    runs-on: ubuntu-latest
    needs: ["test-frontend"]
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Monitor"
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: "monitor"
          args: "--file=frontend/package-lock.json"

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup SBT"
        uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.11
      - name: "Cache sbt"
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier/cache/v1
            ~/.cache/coursier/v1
          key: ${{ runner.os }}-sbt-cache-v2-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
      - name: "Run backend tests"
        run: "sbt test"
      - name: "Check formatting"
        run: "sbt scalafmtCheckAll"
      - name: "Check formatting - sbt files"
        run: "sbt scalafmtSbtCheck"

  snyk-monitor-backend:
    runs-on: ubuntu-latest
    needs: ["test-backend"]
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Add SBT dependency graph"
        run: 'echo -e "\naddSbtPlugin(\"net.virtual-void\" % \"sbt-dependency-graph\" % \"0.10.0-RC1\")" >> ./project/plugins.sbt'
        shell: "bash"
      - name: "Monitor"
        uses: snyk/actions/scala@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: "monitor"
          args: "--sbt-graph --file=build.sbt"

  build-publish-docker:
    runs-on: ubuntu-latest
    needs: ["build-frontend", "test-backend"]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Download frontend artifact"
        uses: actions/download-artifact@v2
        with:
          name: "frontend-${{github.sha}}"
          path: "frontend/build/"
      - name: "List frontend"
        run: "ls -l frontend/build/"
        shell: "bash"
      - name: "Login to Docker Hub"
        uses: docker/login-action@v1
        with:
          registry: "registry.gitlab.com"
          username: ${{ secrets.GITLAB_DOCKER_USERNAME }}
          password: ${{ secrets.GITLAB_DOCKER_PASSWORD }}
      - name: "Setup SBT"
        uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.11
      - name: "Cache sbt"
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier/cache/v1
            ~/.cache/coursier/v1
          key: ${{ runner.os }}-sbt-cache-v2-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}
      - name: "Build dev docker"
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: "sbt docker:publishLocal"
      - name: "Build and publish prod docker"
        if: "startsWith(github.ref, 'refs/tags/v')"
        run: "sbt docker:publish"
      - name: "Tag dev docker image"
        run: "docker tag registry.gitlab.com/huron/huron/huron-web:latest registry.gitlab.com/huron/huron-dev:${GITHUB_SHA}"
      - name: "Publish dev docker image"
        run: "docker push registry.gitlab.com/huron/huron-dev:${GITHUB_SHA}"

  run-e2e-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: e2e
    needs: ["build-publish-docker"]
    container: cypress/browsers:node16.13.2-chrome97-ff96
    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      huron:
        image: registry.gitlab.com/huron/huron-dev:${{ github.sha }}
        credentials:
          username: ${{ secrets.GITLAB_DOCKER_USERNAME }}
          password: ${{ secrets.GITLAB_DOCKER_PASSWORD }}
        env:
          MOBILE_APP_MIN_VERSION: "1.2.3"
          DATABASE_URL: "jdbc:postgresql://postgres:5432/postgres"
          DATABASE_USER: "postgres"
          DATABASE_PASSWORD: "secret"
          REGISTRATION_VERIFICATION_URI: "http://localhost:3000/account-activation"
          REGISTRATION_VALID_FOR: "1 hour"
          DUMMY_BCRYPT_HASH: "$2y$15$lM3v3KTioKYxIFjRpedfI.YLJ/HFzgVk4qArJAJmWNGN4RiRgr1sG"
          SESSIONS_REPOSITORY_TYPE: "InMemory"
          PASSWORD_RESET_URI: "http://localhost:3000/set-password"
          PASSWORD_RESET_VALID_FOR: "1 hour"
          FILESYSTEM_TYPE: "LocalFs"
          FILESYSTEM_ROOT: "/tmp/huron"
          SESSION_COOKIE_SECURE: "false"
        options: >-
          --restart always
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup Node"
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: "e2e/package-lock.json"
      - name: "Install dependencies"
        run: "npm install"
      - name: "Run tests"
        id: e2eTests
        env:
          CYPRESS_DB_HOST: postgres
          CYPRESS_BASE_URL: http://huron:8080
          CYPRESS_IN_DOCKER: "true"
        run: "npm run test:e2e:chrome"
      - name: "Upload failed E2E artifacts"
        if: failure() && steps.e2eTests.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: "failed-e2e-${{github.sha}}"
          path: |
            e2e/cypress/screenshots/
            e2e/cypress/videos/
          retention-days: 1
